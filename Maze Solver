#define leftmotor1 9
#define leftmotor2 8
#define rightmotor1 10
#define rightmotor2 11
int ls;
int cs;
int rs;
char ar[20];
int i;
int j;
char temp[20];
void setup() 
{
 pinMode(leftmotor1,OUTPUT);
 pinMode(leftmotor2,OUTPUT);
 pinMode(rightmotor1,OUTPUT);
 pinMode(rightmotor2,OUTPUT);
 pinMode(5,INPUT);
 pinMode(6,INPUT);
 pinMode(7,INPUT);
 }

void loop() {
  ls=digitalRead(5);
  cs=digitalRead(6);
  rs=digitalRead(7);
  if(rs==HIGH)
     { right();
     }
  else if(rs==LOW&&cs==HIGH)
     {  straight();
     }
  else if(rs==LOW&&cs==LOW&&ls==HIGH)
     {  left();
     }
   else if(rs==LOW&&cs==LOW&&ls==LOW)
     { back();
     }  
  else if(rs==HIGH&&cs==HIGH&&ls==HIGH)
  {   delay(5000);
      replay(); 
  }
}
void left()                                               //Function for turning left
{   
    
    digitalWrite(leftmotor1, LOW);
    digitalWrite(leftmotor2, HIGH);
    digitalWrite(rightmotor1, HIGH);
    digitalWrite(rightmotor2, LOW);
    
   ar[i]='L';
   i++;
   if(ar[i-2]=='B')
     { shortpath();
     }
}
void straight()                                              //Function for moving straight
{   digitalWrite(leftmotor1, HIGH);
    digitalWrite(leftmotor2, LOW);
    digitalWrite(rightmotor1, HIGH);
    digitalWrite(rightmotor2, LOW); 
    
    ar[i]='S';
    i++;
    if(ar[i-2]=='B')  
      { shortpath();
      }
 }
void right()                                                 //Function for turning right
{   digitalWrite(leftmotor1, HIGH);
    digitalWrite(leftmotor2, LOW);
    digitalWrite(rightmotor1, LOW);
    digitalWrite(rightmotor2, HIGH);  
      
  ar[i]='R';
  if(ar[i-2]=='B')
     { shortpath();
     }
}    
void back()                                                        //Function for turning back
{   digitalWrite(leftmotor1, HIGH);
    digitalWrite(leftmotor2, LOW);
    digitalWrite(rightmotor1, HIGH);
    digitalWrite(rightmotor2, LOW); 
       
   ar[i]=='B';
    i++;
}
void shortpath()                                                   //Fuction for removing B's from the array
{  int shortdone=0;
  if(ar[i-3]=='L'&&ar[i-1]=='R')
     { i=i-3;
        ar[i]='B';
        shortdone=1;
     }
   if(ar[i-3]=='L'&&ar[i-1]=='S'&&shortdone==0)
     { i=i-3;
        ar[i]='R';
        shortdone=1;
     }
    if(ar[i-3]=='L'&&ar[i-1]=='L'&&shortdone==0)
     { i=i-3;
        ar[i]='S';
        shortdone=1;
     }
   if(ar[i-3]=='S'&&ar[i-1]=='L'&&shortdone==0)
     { i=i-3;
        ar[i]='R';
        shortdone=1;
     }
   if(ar[i-3]=='S'&&ar[i-1]=='S'&&shortdone==0)
     { i=i-3;
        ar[i]='B';
        shortdone=1;
     }        
   if(ar[i-3]=='R'&&ar[i-1]=='L'&&shortdone==0)
     { i=i-3;
        ar[i]='B';
        shortdone=1;
     }
}
void replay()                                                //Function to retrace the path through new saved shortest route
{
   for(j=0,i=0;j<=i,ar[i]!='\0';i++,j++)
    { temp[j]=ar[i];
    }
    temp[j]='\0';
   for(j=0;temp[j]!='\0';j++)
      {  if(temp[j]=='L')
         { left();}
        else if(temp[j]=='R')
          { right();}
        else if(temp[j]=='S')
          { straight();}
        else if(temp[j]=='B')
           { back();}
     }
  if(ls==HIGH&&cs==HIGH&&rs==HIGH)
  rest();
}
void rest()                                                         //Function to stop at finish point
{   digitalWrite(leftmotor1, LOW);
    digitalWrite(leftmotor2, LOW);
    digitalWrite(rightmotor1, LOW);
    digitalWrite(rightmotor2, LOW);  
}    
       
